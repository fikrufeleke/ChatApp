/*
*
* A simple linux comand line chat application
* Author: Fikru Feleke
*
*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <stdbool.h>

#include <sys/socket.h>
#include <arpa/inet.h>

#include "chat_utils.h"

/* 
* client side procedures 
* defined in "chat_utils.h"
*/
void send_connection(connection_info *, char *, char *);
void close_connection(connection_info *);
void send_login(connection_info *);
void send_registration(connection_info *);
void send_join(connection_info *);
void send_new_chatroom(connection_info *);
void send_private_msg(connection_info *, char *, char *);
void send_public_msg(connection_info *, char *);
void get_users(connection_info *);
void handle_client_input(connection_info *);
void handle_server_message(connection_info *);
void get_input(char *, int);

int main(int argc, char *argv[])
{
  connection_info connection;
  fd_set file_descriptors;

  if (argc != 3) {
    fprintf(stderr,"Usage: %s <IP> <port>\n", argv[0]);
    exit(1);
  }

  send_connection(&connection, argv[1], argv[2]);

  //keep communicating with server
  while(true)
  {
    FD_ZERO(&file_descriptors);
    FD_SET(STDIN_FILENO, &file_descriptors);
    FD_SET(connection.socket, &file_descriptors);
    fflush(stdin);
	/*If there is input in file descriptors then proceed	*/
    if(select(connection.socket+1, &file_descriptors, NULL, NULL, NULL) < 0)
    {
      perror("Select failed.");
      exit(1);
    }

    if(FD_ISSET(STDIN_FILENO, &file_descriptors))
    {
      handle_client_input(&connection);
    }

    if(FD_ISSET(connection.socket, &file_descriptors))
    {
      handle_server_message(&connection);
    }
  }

  close(connection.socket);
  return 0;
}

//initialize connection to the server.
void send_connection(connection_info *connection, char *address, char *port)
{

	//Create socket
    if ((connection->socket = socket(AF_INET, SOCK_STREAM , IPPROTO_TCP)) < 0)
    {
        perror("Could not create socket");
    }

    connection->address.sin_addr.s_addr = inet_addr(address);
    connection->address.sin_family = AF_INET;
    connection->address.sin_port = htons(atoi(port));

    //Connect to remote server
    if (connect(connection->socket, (struct sockaddr *)&connection->address , sizeof(connection->address)) < 0)
    {
        perror("Connect failed.");
        exit(1);
    }
	
	puts("Connected to server.");
	puts("valid commands: ");
	puts("/q: Exit the program.");
	puts("/h: Displays help information.");
	puts("/u: Displays list of users.");
	puts("/l: To login .");
	puts("/r: To register.");
	puts("/j: To join a chatroom.");
	puts("/c: To create a chatroom.");
	puts("/m <username> <message> Send a private message to given username.");

}


void close_connection(connection_info *connection)
{
	close(connection->socket);
	exit(0);
}


void send_login(connection_info *connection)
{
  	
	chat_msg_protocol msg;
	msg.type = LOGIN;
	strncpy(msg.username, connection->username, 20);
	// encrypt password
	encrypt(connection->password);
	strncpy(msg.password, connection->password, 20);
	// send credentials 
	if(send(connection->socket, (void*)&msg, sizeof(msg), 0) < 0)
	{
		perror("Send failed");
		exit(1);
	}
	
}

void send_registration(connection_info *connection)
{
  
	chat_msg_protocol msg;
	msg.type = REGISTER;
	strncpy(msg.username, connection->username, 20);
	// encrypt password
	encrypt(connection->password);
	strncpy(msg.password, connection->password, 20);
	// send credentials to register
	if(send(connection->socket, (void*)&msg, sizeof(msg), 0) < 0)
	{
		perror("Send failed");
		exit(1);
	}
}

void send_join(connection_info *connection)
{
  
    chat_msg_protocol msg;
    msg.type = JOIN;
	strncpy(msg.chatroom_name, connection->chatroom_name, 20);
	// send  a chatroom name to join
	if(send(connection->socket, (void*)&msg, sizeof(msg), 0) < 0)
	{
		perror("Send failed");
		exit(1);
	}
   
}

void send_new_chatroom(connection_info *connection)
{
  
	chat_msg_protocol msg;
    msg.type = NEW_CHATROOM;
	strncpy(msg.chatroom_name, connection->chatroom_name, 20);
	// send a chatroom name to be created
	if(send(connection->socket, (void*)&msg, sizeof(msg), 0) < 0)
	{
		perror("Send failed");
		exit(1);
	}
    
}

void send_private_msg(connection_info *connection, char *touser, char *body)
{
	chat_msg_protocol msg;
	msg.type = PRIVATE_MESSAGE;	
	if(body == NULL)
	{
		puts("You must enter a message to send to the specified user.");
		return;
	}
    strncpy(msg.username, touser, 20);
	strncpy(msg.data, body, 255);

	if(send(connection->socket, &msg, sizeof(chat_msg_protocol), 0) < 0)
	{
		perror("Send failed");
		exit(1);
	}
}

void send_public_msg(connection_info *connection, char *input)
{
	chat_msg_protocol msg;
	msg.type = PUBLIC_MESSAGE;
	strncpy(msg.username, connection->username, 20);
	if(strlen(input) == 0) {
		return;
	}
	strncpy(msg.data, input, 255);
	if(send(connection->socket, &msg, sizeof(chat_msg_protocol), 0) < 0)
	{
		perror("Send failed");
		exit(1);
	}
}
	
void get_users(connection_info *connection)
{
  
	chat_msg_protocol msg;
	msg.type = GET_USERS;
	if(send(connection->socket, (void*)&msg, sizeof(msg), 0) < 0)
	{
		perror("Send failed");
		exit(1);
	}
}

void handle_client_input(connection_info *connection)
{
	char input[255];
	fgets(input, 255, stdin);
	trim_newline(input);
    if(strlen(input)==2 && input[0]=='/')
	{
		switch(input[1])
		{
			case 'q':	
			close_connection(connection);
			break;
			case 'u':
			get_users(connection);	
			break;
			case 'l':
			// get username and password from user
			get_input(connection->username, 0);
			get_input(connection->password, 1);
			send_login(connection);
			break;
			case 'j':
			// get a chatroom name from user
			get_input(connection->chatroom_name, 2);
			send_join(connection);
			break;
			case 'c':
			// get chatroom name from user
			get_input(connection->chatroom_name, 2);
			send_new_chatroom(connection);
			break;
			case 'r':
			// get username and password from user
			get_input(connection->username, 0);
			get_input(connection->password, 1);
			send_registration(connection);
			break;
			case 'h':
			puts("/q: Exit the program.");
			puts("/h: Displays help information.");
			puts("/u: Displays list of users.");
			puts("/l: To login .");
			puts("/r: To register.");
			puts("/j: To join a chatroom.");
			puts("/c: To create a chatroom.");
			//puts("/d: To delete a user from file.");
			puts("/m <username> <message> Send a private message to given username.");
			break;
			default:
			puts("invalid command! type /h for help ");
			break;
		}
	}
	else if(strncmp(input, "/m", 2) == 0)
	{
		char *touser, *body;
		touser = strtok(input+3, " ");

		if(touser == NULL)
		{
			puts("The format for private messages is: /m <username> <message>");
			return;
		}

		if(strlen(touser) == 0)
		{
			puts("You must enter a username for a private message.");
			return;
		}

		if(strlen(touser) > 20)
		{
			puts("The username must be between 1 and 20 characters.");
			return;
		}

		body = strtok(NULL, "");
		send_private_msg(connection, touser, body);
	}
	else //regular public message
	{
		send_public_msg(connection, input);
	}
}

void handle_server_message(connection_info *connection)
{
	chat_msg_protocol msg;
	//Receive a reply from the server
	ssize_t recv_val = recv(connection->socket, &msg, sizeof(chat_msg_protocol), 0);
	if(recv_val < 0)
	{
		perror("recv failed");
		exit(1);

	}
	else if(recv_val == 0)
	{
		close(connection->socket);
		puts("Server disconnected.");
		exit(0);
	}

	switch(msg.type)
	{

		case LOGIN_SUCCESS:
			printf("%s is logged in.\n", msg.username);
		break;

		case DISCONNECT:
			printf("%s is disconnected.\n" , msg.username);
		break;

		case GET_USERS:
			printf("Active users: \n %s", msg.data);
		break;
	
		case JOIN_SUCCESS :
			printf("user name: %s join chatroom: %s \n", msg.username, msg.chatroom_name);
		break;

		case LOGIN:
			fprintf(stderr, "You have to login to use the chat service.\n");
		break;
	
		case PUBLIC_MESSAGE:
			printf("%s : %s\n", msg.username, msg.data);
		break;

		case PRIVATE_MESSAGE:
			printf("From %s : %s\n" , msg.username, msg.data);
		break;

		case USERS_FULL:
			fprintf(stderr, "Server is too full to accept new clients.\n");
		break;
	
		case ROOMS_FULL:
			fprintf(stderr, "Number of chatrooms exceed maximum allowed, you can't create new room .\n");
		break;
	
		case LOGIN_ERROR:
			fprintf(stderr, "login errror:incorrect name or password \n");
		break;
	
		case REGISTER_ERROR:
			fprintf(stderr, "register errror:user already available \n");
		break;
	
		case RNAME_ERROR:
			fprintf(stderr, "incorrect chatroom name  \n");
		break;
	
		case USERNAME_ERROR:
			fprintf(stderr, "receiver username not found \n");
		break;
	
		default:
			fprintf(stderr, "Unknown message type received.\n");
		break;
	}
}

/* get a user input(username, password and chatroom id) */
void get_input(char *input, int type)
{
	char *prompt;
	if(type == 0) prompt = "username";
	else if(type == 1) prompt = "password";
	else if(type == 2) prompt = "chatroom name";
	else return;
	while(true)
	{
		printf("enter %s: ", prompt);
		fflush(stdout);
		memset(input, 0, 1000);
		fgets(input, 22, stdin);
		trim_newline(input);

		if(strlen(input) > 20)
		{
		printf("%s must be 20 characters or less.", prompt);

		} else {
		break;
		}
	}
}


